[{"C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\index.js":"1","C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\reportWebVitals.js":"2","C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\ImageGallery.js":"3","C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\components\\SortableItem.jsx":"4","C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\App.jsx":"5"},{"size":535,"mtime":1699278876786,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1699278861281,"results":"8","hashOfConfig":"7"},{"size":2854,"mtime":1699278861218,"results":"9","hashOfConfig":"7"},{"size":2772,"mtime":1699278339497,"results":"10","hashOfConfig":"7"},{"size":4871,"mtime":1699279560386,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ld930y",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\index.js",[],[],"C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\ImageGallery.js",["29"],[],"import React, { useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\n\r\nconst initialImages = [\r\n  // Add your initial images here\r\n  { id: \"1\", url: \"../public/images/image-1.webp\" },\r\n  { id: \"2\", url: \"../public/images/image-2.webp\" },\r\n  { id: \"3\", url: \"../public/images/image-3.webp\" },\r\n  { id: \"4\", url: \"../public/images/image-4.webp\" },\r\n  { id: \"5\", url: \"../public/images/image-5.webp\" },\r\n  { id: \"6\", url: \"../public/images/image-6.webp\" },\r\n  { id: \"7\", url: \"../public/images/image-7.webp\" },\r\n  { id: \"8\", url: \"../public/images/image-8.webp\" },\r\n  { id: \"9\", url: \"../public/images/image-9.webp\" },\r\n  { id: \"10\", url: \"../public/images/image-10.webp\" },\r\n  { id: \"11\", url: \"../public/images/image-11.webp\" },\r\n \r\n  // Add more images\r\n];\r\n\r\nconst ImageGallery = () => {\r\n  const [images, setImages] = useState(initialImages);\r\n\r\n  const onDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n\r\n    const updatedImages = [...images];\r\n    const [reorderedItem] = updatedImages.splice(result.source.index, 1);\r\n    updatedImages.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    setImages(updatedImages);\r\n  };\r\n\r\n  const handleDelete = (imageId) => {\r\n    const updatedImages = images.filter((image) => image.id !== imageId);\r\n    setImages(updatedImages);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"image-gallery\" direction=\"horizontal\">\r\n          {(provided) => (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={{ display: \"flex\" }}\r\n            >\r\n              {images.map((image, index) => (\r\n                <Draggable\r\n                  key={image.id}\r\n                  draggableId={image.id}\r\n                  index={index}\r\n                >\r\n                  {(provided) => (\r\n                    <div\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      ref={provided.innerRef}\r\n                    >\r\n                      <div className=\"image-container\">\r\n                        <img src={image.url} alt={`Image ${image.id}`} />\r\n                        <button\r\n                          onClick={() => handleDelete(image.id)}\r\n                          className=\"delete-button\"\r\n                        >\r\n                          <FaTrash />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGallery;\r\n",["30"],"C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\components\\SortableItem.jsx",["31","32","33","34"],[],"C:\\Users\\Roy\\Desktop\\New folder\\New folder\\image-gallery-app\\src\\App.jsx",["35"],[],{"ruleId":"36","severity":1,"message":"37","line":63,"column":25,"nodeType":"38","endLine":63,"endColumn":74},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":31,"column":48,"nodeType":"43","messageId":"44","endLine":31,"endColumn":50},{"ruleId":"41","severity":1,"message":"42","line":43,"column":50,"nodeType":"43","messageId":"44","endLine":43,"endColumn":52},{"ruleId":"41","severity":1,"message":"42","line":57,"column":51,"nodeType":"43","messageId":"44","endLine":57,"endColumn":53},{"ruleId":"41","severity":1,"message":"45","line":58,"column":51,"nodeType":"43","messageId":"44","endLine":58,"endColumn":53},{"ruleId":"46","severity":1,"message":"47","line":34,"column":10,"nodeType":"48","messageId":"49","endLine":34,"endColumn":18},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-new-object",["50"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'activeId' is assigned a value but never used.","Identifier","unusedVar","no-object-constructor"]